{
  "name": "passport-local-mongoose",
  "description": "Mongoose plugin that simplifies building username and password login with Passport",
  "version": "1.3.0",
  "main": "lib/passport-local-mongoose.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/saintedlama/passport-local-mongoose.git"
  },
  "author": {
    "name": "Christoph Walcher",
    "email": "christoph.walcher@gmail.com"
  },
  "license": "MIT",
  "keywords": [
    "mongoose",
    "passport",
    "authentication",
    "login"
  ],
  "engines": {
    "node": ">= 0.9"
  },
  "dependencies": {
    "passport-local": "^1.0.0",
    "scmp": "^1.0.0"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^1.21.4",
    "mongoose": "3.8.x",
    "shelljs": "^0.5.3"
  },
  "scripts": {
    "test": "mocha -R spec test/",
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "release": "node release.js"
  },
  "readme": "# Passport-Local Mongoose\nPassport-Local Mongoose is a [Mongoose](http://mongoosejs.com/) [plugin](http://mongoosejs.com/docs/plugins.html) \nthat simplifies building username and password login with [Passport](http://passportjs.org).\n\n[![Build Status](https://travis-ci.org/saintedlama/passport-local-mongoose.png?branch=master)](https://travis-ci.org/saintedlama/passport-local-mongoose)\n[![Coverage Status](https://coveralls.io/repos/saintedlama/passport-local-mongoose/badge.png?branch=master)](https://coveralls.io/r/saintedlama/passport-local-mongoose?branch=master)\n\n## Tutorials\nMichael Herman gives a comprehensible walk through for setting up mongoose,\npassport, passport-local and passport-local-mongoose for user authentication in his blog post [User Authentication With Passport.js](http://mherman.org/blog/2013/11/11/user-authentication-with-passport-dot-js/)\n\n\n## Installation\n\n    $ npm install passport-local-mongoose\n\nPassport-Local Mongoose does not require `passport`, `passport-local` or `mongoose` dependencies directly but expects you\nto have these dependencies installed.\n\nIn case you need to install the whole set of dependencies\n\n    $ npm install passport passport-local mongoose passport-local-mongoose --save\n\n## Usage\n\n### Plugin Passport-Local Mongoose\nFirst you need to plugin Passport-Local Mongoose into your User schema\n\n    var mongoose = require('mongoose'),\n        Schema = mongoose.Schema,\n        passportLocalMongoose = require('passport-local-mongoose');\n    \n    var User = new Schema({});\n    \n    User.plugin(passportLocalMongoose);\n    \n    module.exports = mongoose.model('User', User);\n\nYou're free to define your User how you like. Passport-Local Mongoose will add a username, hash and salt field to store\nthe username, the hashed password and the salt value.\n\nAdditionally Passport-Local Mongoose adds some methods to your Schema. See the API Documentation section for more details.\n\n### Configure Passport/Passport-Local\nYou should configure Passport/Passport-Local as described in [the Passport Guide](http://passportjs.org/guide/configure/).\n\nPassport-Local Mongoose supports this setup by implementing a `LocalStrategy` and serializeUser/deserializeUser functions.\n\nTo setup Passport-Local Mongoose use this code\n\n    // requires the model with Passport-Local Mongoose plugged in\n    var User = require('./models/user');\n    \n    // use static authenticate method of model in LocalStrategy\n    passport.use(new LocalStrategy(User.authenticate()));\n    \n    // use static serialize and deserialize of model for passport session support\n    passport.serializeUser(User.serializeUser());\n    passport.deserializeUser(User.deserializeUser());\n\nMake sure that you have a mongoose connected to mongodb and you're done.\n\n#### Simplified Passport/Passport-Local Configuration\nStarting with version 0.2.1 passport-local-mongoose adds a helper method `createStrategy` as static method to your schema.\nThe `createStrategy` is responsible to setup passport-local `LocalStrategy` with the correct options.\n\n    var User = require('./models/user');\n    \n    // CHANGE: USE \"createStrategy\" INSTEAD OF \"authenticate\"\n    passport.use(User.createStrategy());\n    \n    passport.serializeUser(User.serializeUser());\n    passport.deserializeUser(User.deserializeUser());\n\nThe reason for this functionality is that when using the `usernameField` option to specify an alternative usernameField name, \nfor example \"email\" passport-local would still expect your frontend login form to contain an input field with name \"username\"\ninstead of email. This can be configured for passport-local but this is double the work. So we got this shortcut implemented.\n\n### Options\nWhen plugging in Passport-Local Mongoose plugin additional options can be provided to configure\nthe hashing algorithm.\n\n    User.plugin(passportLocalMongoose, options);\n\n__Main Options__\n\n* saltlen: specifies the salt length in bytes. Default: 32\n* iterations: specifies the number of iterations used in pbkdf2 hashing algorithm. Default: 25000\n* keylen: specifies the length in byte of the generated key. Default: 512\n* digestAlgorithm: specifies the pbkdf2 digest algorithm. Default: sha1. (get a list of supported algorithms with crypto.getHashes())\n* interval: specifies the interval in milliseconds between login attempts. Default: 100\n* usernameField: specifies the field name that holds the username. Defaults to 'username'. This option can be used if you want to use a different \nfield to hold the username for example \"email\".\n* usernameUnique : specifies if the username field should be enforced to be unique by a mongodb index or not. Defaults to true.\n* saltField: specifies the field name that holds the salt value. Defaults to 'salt'.\n* hashField: specifies the field name that holds the password hash value. Defaults to 'hash'.\n* attemptsField: specifies the field name that holds the number of login failures since the last successful login. Defaults to 'attempts'.\n* lastLoginField: specifies the field name that holds the timestamp of the last login attempt. Defaults to 'last'.\n* selectFields: specifies the fields of the model to be selected from mongodb (and stored in the session). Defaults to 'undefined' so that all fields of the model are selected.\n* usernameLowerCase: convert username field value to lower case when saving an querying. Defaults to 'false'.\n* populateFields: specifies fields to populate in findByUsername function. Defaults to 'undefined'.\n* encoding: specifies the encoding the generated salt and hash will be stored in. Defaults to 'hex'.\n* limitAttempts: specifies whether login attempts should be limited and login failures should be penalized. Default: false.\n* maxAttempts: specifies the maximum number of failed attempts allowed before preventing login. Default: Infinity.\n* passwordValidator: specifies your custom validation function for the password in the form 'function(password,cb)'. Default: validates non-empty passwords.\n* usernameQueryFields: specifies alternative fields of the model for identifying a user (e.g. email).\n\n__Error Message Options__\n\n* incorrectPasswordError: specifies the error message returned when the password is incorrect. Defaults to 'Incorrect password'.\n* incorrectUsernameError: specifies the error message returned when the username is incorrect. Defaults to 'Incorrect username'.\n* missingUsernameError: specifies the error message returned when the username has not been set during registration. Defaults to 'Field %s is not set'.\n* missingPasswordError: specifies the error message returned when the password has not been set during registration. Defaults to 'Password argument not set!'.\n* userExistsError: specifies the error message returned when the user already exists during registration. Defaults to 'User already exists with name %s'.\n* noSaltValueStored: specifies the error message returned in case no salt value is stored in the mongodb collection. Defaults to 'Authentication not possible. No salt value stored in mongodb collection!'\n* tooManyAttemptsError: specifies the error message returned when the user's account is locked due to too many failed login attempts. Defaults to 'Account locked due to too many failed login attempts'.\n\n*Attention!* Changing any of the hashing options (saltlen, iterations or keylen) in a production environment will prevent that existing users to authenticate!\n\n### Hash Algorithm\nPassport-Local Mongoose use the pbkdf2 algorithm of the node crypto library. \n[Pbkdf2](http://en.wikipedia.org/wiki/PBKDF2) was chosen because platform independent\n(in contrary to bcrypt). For every user a generated salt value is saved to make\nrainbow table attacks even harder.\n\n### Examples\nFor a complete example implementing a registration, login and logout see the \n[login example](https://github.com/saintedlama/passport-local-mongoose/tree/master/examples/login).\n\n## API Documentation\n### Instance methods\n\n#### setPassword(password, cb) \nasynchronous method to set a user's password hash and salt\n\n#### authenticate(password, cb)\nasynchronous method to authenticate a user instance\n\n### resetAttempts(cb)\nasynchronous method to reset a user's number of failed password attempts (only defined if `options.limitAttempts` is true)\n\n**callback arguments**\n- err\n  - null unless the hasing algorithm throws an error\n- thisModel\n  - the model getting authenticated *if* authentication was successful otherwise false\n- passwordErr\n  - the reason the password failed, else undefined ex. `{message: \"Incorrect password\"}\n\nUsing `setPassword()` will only update the document's password fields, but will not save the document.\nTo commit the changed document, remember to use Mongoose's `document.save()` after using `setPassword()`.\n\n### Static methods\nStatic methods are exposed on the model constructor. For example to use createStrategy function use\n\n    var User = require('./models/user');\n    User.createStrategy();\n\n* authenticate() Generates a function that is used in Passport's LocalStrategy\n* serializeUser() Generates a function that is used by Passport to serialize users into the session\n* deserializeUser() Generates a function that is used by Passport to deserialize users into the session\n* register(user, password, cb) Convenience method to register a new user instance with a given password. Checks if username is unique. See [login example](https://github.com/saintedlama/passport-local-mongoose/tree/master/examples/login).\n* findByUsername() Convenience method to find a user instance by it's unique username.\n* createStrategy() Creates a configured passport-local `LocalStrategy` instance that can be used in passport.\n\n## License\nPassport-Local Mongoose is licenses under the [MIT license](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/saintedlama/passport-local-mongoose/issues"
  },
  "_id": "passport-local-mongoose@1.3.0",
  "_from": "passport-local-mongoose@^1.0.0"
}
